# update-azure-project.ps1
# Updates an existing Azure infrastructure project with latest templates
# Preserves existing Bicep files and custom configurations

param(
    [string]$Path = ".",
    [switch]$UpdateWorkflows,
    [switch]$UpdateIssueTemplates,
    [switch]$UpdateCopilotInstructions,
    [switch]$UpdateScripts,
    [switch]$UpdateAll,
    [switch]$BackupFirst,
    [switch]$Force
)

# Color functions
function Write-Success($message) {
    Write-Host "[OK] $message" -ForegroundColor Green
}

function Write-Info($message) {
    Write-Host "[INFO] $message" -ForegroundColor Blue
}

function Write-Warning($message) {
    Write-Host "[WARN] $message" -ForegroundColor Yellow
}

function Write-Error($message) {
    Write-Host "[ERROR] $message" -ForegroundColor Red
}

# Function to backup files
function Backup-File($filePath) {
    if (Test-Path $filePath) {
        $backupPath = "$filePath.backup.$(Get-Date -Format 'yyyyMMdd-HHmmss')"
        Copy-Item $filePath $backupPath
        Write-Info "Backed up: $filePath to $backupPath"
        return $true
    }
    return $false
}

# Function to check if file has custom modifications
function Test-FileModified($filePath, $originalMarker = "Generated by create-azure-project.ps1") {
    if (Test-Path $filePath) {
        $content = Get-Content $filePath -Raw
        # Check if file contains the original marker and hasn't been modified
        if ($content -match $originalMarker) {
            Write-Info "$filePath appears to be unmodified template"
            return $false
        }
        Write-Warning "$filePath has been customized"
        return $true
    }
    return $false
}

# Main execution
Write-Host ""
Write-Host "Azure Infrastructure Project Updater" -ForegroundColor Blue
Write-Host "===================================" -ForegroundColor Blue
Write-Host ""

# Check if we're in a valid project directory
if (-not (Test-Path "azure.yaml")) {
    Write-Error "No azure.yaml found. Are you in an Azure infrastructure project directory?"
    exit 1
}

# Read project name from azure.yaml
$azureYaml = Get-Content "azure.yaml" -Raw
if ($azureYaml -match 'name:\s*(.+)') {
    $projectName = $Matches[1].Trim()
    Write-Success "Found project: $projectName"
} else {
    $projectName = "myapp"
    Write-Warning "Could not determine project name, using default: $projectName"
}

# If UpdateAll is specified, set all flags
if ($UpdateAll) {
    $UpdateWorkflows = $true
    $UpdateIssueTemplates = $true
    $UpdateCopilotInstructions = $true
    $UpdateScripts = $true
}

# If no specific updates requested, show menu
if (-not ($UpdateWorkflows -or $UpdateIssueTemplates -or $UpdateCopilotInstructions -or $UpdateScripts)) {
    Write-Host ""
    Write-Host "What would you like to update?" -ForegroundColor Yellow
    Write-Host "1. GitHub Workflows" -ForegroundColor White
    Write-Host "2. Issue Templates" -ForegroundColor White
    Write-Host "3. Copilot Instructions" -ForegroundColor White
    Write-Host "4. Scripts" -ForegroundColor White
    Write-Host "5. All of the above" -ForegroundColor White
    Write-Host "6. Exit" -ForegroundColor White
    Write-Host ""
    
    $choice = Read-Host "Select option (1-6)"
    
    switch ($choice) {
        "1" { $UpdateWorkflows = $true }
        "2" { $UpdateIssueTemplates = $true }
        "3" { $UpdateCopilotInstructions = $true }
        "4" { $UpdateScripts = $true }
        "5" { 
            $UpdateWorkflows = $true
            $UpdateIssueTemplates = $true
            $UpdateCopilotInstructions = $true
            $UpdateScripts = $true
        }
        "6" { 
            Write-Info "Exiting without changes"
            exit 0
        }
        default {
            Write-Error "Invalid option"
            exit 1
        }
    }
}

# Create backup if requested
if ($BackupFirst) {
    Write-Info "Creating backups..."
    $backupDir = ".backup-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
    New-Item -ItemType Directory -Path $backupDir -Force | Out-Null
    Copy-Item -Path "." -Destination $backupDir -Recurse -Exclude @(".git", "node_modules", ".azure")
    Write-Success "Backup created in: $backupDir"
}

# Update GitHub Workflows
if ($UpdateWorkflows) {
    Write-Host ""
    Write-Info "Updating GitHub Workflows..."
    
    # Update main deployment workflow
    $workflowPath = ".github/workflows/azure-deploy.yml"
    
    if (Test-Path $workflowPath) {
        if (Test-FileModified $workflowPath) {
            if (-not $Force) {
                $response = Read-Host "azure-deploy.yml has been modified. Update anyway? (y/N)"
                if ($response -ne 'y') {
                    Write-Warning "Skipping azure-deploy.yml update"
                }
            }
        }
    }
    
    if ($UpdateWorkflows) {
        if ($BackupFirst -or (Test-Path $workflowPath)) {
            Backup-File $workflowPath
        }
        
        # Create the complete deployment workflow
        $workflowContent = @'
name: Deploy Azure Infrastructure

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  AZURE_LOCATION: 'eastus'
  
permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  validate:
    runs-on: ubuntu-latest
    name: Validate Infrastructure
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Azure CLI
        uses: azure/setup-azd@v1
        with:
          version: 'stable'

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Validate Bicep templates
        run: |
          az bicep build --file ./infra/main.bicep
          
      - name: What-if deployment
        if: github.event_name == 'pull_request'
        id: whatif
        run: |
          azd provision --preview --environment ${{ github.event.inputs.environment || 'development' }} --no-prompt
          
      - name: Post PR comment with changes
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = '${{ steps.whatif.outputs.changes }}';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: `## Infrastructure Changes Preview\n\n\`\`\`\n${output}\n\`\`\``
            });

  deploy:
    runs-on: ubuntu-latest
    name: Deploy Infrastructure
    needs: validate
    if: github.event_name != 'pull_request'
    environment:
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'development') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Azure Developer CLI
        uses: azure/setup-azd@v1
        with:
          version: 'stable'

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Configure environment
        run: |
          azd env new ${{ github.event.inputs.environment || 'development' }} --location ${{ env.AZURE_LOCATION }} --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          azd env set AZURE_SUBSCRIPTION_ID ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          azd env set AZURE_LOCATION ${{ env.AZURE_LOCATION }}
          
      - name: Provision infrastructure
        run: |
          azd provision --environment ${{ github.event.inputs.environment || 'development' }} --no-prompt
          
      - name: Deploy application
        run: |
          azd deploy --environment ${{ github.event.inputs.environment || 'development' }} --no-prompt

      - name: Show deployment outputs
        run: |
          azd env get-values --environment ${{ github.event.inputs.environment || 'development' }}

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scanning
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ./infra
          framework: bicep
          output_format: sarif
          output_file_path: results.sarif
          
      - name: Upload SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  cost-estimation:
    runs-on: ubuntu-latest
    name: Cost Estimation
    needs: validate
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Infracost
        uses: infracost/setup-infracost@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Generate cost estimate
        run: |
          infracost breakdown --path ./infra \
            --format json \
            --out-file /tmp/infracost.json

      - name: Post cost estimate to PR
        run: |
          infracost comment github --path /tmp/infracost.json \
            --repo ${{ github.repository }} \
            --pull-request ${{ github.event.pull_request.number }} \
            --github-token ${{ github.token }}
'@
        $workflowContent | Out-File -FilePath $workflowPath -Encoding UTF8
        Write-Success "Updated GitHub deployment workflow"
    }
    
    # Add Copilot setup workflow
    $copilotWorkflowPath = ".github/workflows/copilot-setup-steps.yml"
    
    if (Test-Path $copilotWorkflowPath) {
        if (Test-FileModified $copilotWorkflowPath) {
            if (-not $Force) {
                $response = Read-Host "copilot-setup-steps.yml has been modified. Update anyway? (y/N)"
                if ($response -ne 'y') {
                    Write-Warning "Skipping copilot-setup-steps.yml update"
                    $skipCopilotWorkflow = $true
                }
            }
        }
    }
    
    if (-not $skipCopilotWorkflow) {
        if ($BackupFirst -or (Test-Path $copilotWorkflowPath)) {
            Backup-File $copilotWorkflowPath
        }
        
        # Create the Copilot setup workflow
        $copilotSetupWorkflow = @'
name: Copilot Setup and MCP Configuration

on:
  push:
    paths:
      - '.github/copilot-instructions.md'
      - '.github/workflows/copilot-setup-steps.yml'
      - '.mcp/**'
      - '**/*.bicep'
      - 'azure.yaml'
  pull_request:
    paths:
      - '.github/copilot-instructions.md'
      - '.mcp/**'
      - '**/*.bicep'
  workflow_dispatch:

jobs:
  copilot-setup-steps:
    runs-on: ubuntu-latest
    name: Setup Copilot with Azure MCP
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js for MCP
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Validate Copilot instructions exist
        run: |
          if [ ! -f ".github/copilot-instructions.md" ]; then
            echo "Missing .github/copilot-instructions.md file"
            exit 1
          fi
          echo "[OK] Copilot instructions file found"

      - name: Check Copilot instructions content
        run: |
          # Check for required MCP sections
          required_sections=(
            "## Azure MCP Server Integration"
            "## Project Overview"
            "## Key Principles"
            "## Project Structure"
            "## When Implementing Infrastructure"
          )
          
          missing_sections=()
          for section in "${required_sections[@]}"; do
            if ! grep -q "$section" .github/copilot-instructions.md; then
              missing_sections+=("$section")
            fi
          done
          
          if [ ${#missing_sections[@]} -gt 0 ]; then
            echo "Missing required sections in copilot-instructions.md:"
            printf '%s\n' "${missing_sections[@]}"
            exit 1
          fi
          
          echo "[OK] All required sections found in copilot instructions"

      - name: Setup Azure MCP Server configuration
        run: |
          # Create MCP configuration directory
          mkdir -p .mcp
          
          # Create MCP configuration file
          cat > .mcp/config.json << EOF
          {
            "azure": {
              "authentication": {
                "type": "environment",
                "tenantId": "\${AZURE_TENANT_ID}",
                "clientId": "\${AZURE_CLIENT_ID}",
                "clientSecret": "\${AZURE_CLIENT_SECRET}",
                "subscriptionId": "\${AZURE_SUBSCRIPTION_ID}"
              }
            },
            "server": {
              "port": 3333,
              "host": "localhost"
            },
            "features": {
              "resourceDiscovery": true,
              "costAnalysis": true,
              "securityScanning": true,
              "infrastructureMapping": true
            }
          }
          EOF
          
          echo "[OK] MCP configuration created"

      - name: Install Azure MCP Server
        run: |
          # Check if package.json exists, if not create it
          if [ ! -f "package.json" ]; then
            npm init -y
          fi
          
          # Install MCP server as dev dependency
          npm install --save-dev @modelcontextprotocol/server-azure
          
          echo "[OK] Azure MCP Server installed"

      - name: Create MCP startup script
        run: |
          cat > .mcp/start-server.js << 'EOF'
          const { AzureMCPServer } = require('@modelcontextprotocol/server-azure');
          const config = require('./config.json');
          
          async function startServer() {
            const server = new AzureMCPServer(config);
            
            server.on('ready', () => {
              console.log('[OK] Azure MCP Server is ready');
              console.log(`Server running at http://${config.server.host}:${config.server.port}`);
            });
            
            server.on('error', (error) => {
              console.error('[ERROR] MCP Server error:', error);
            });
            
            await server.start();
          }
          
          startServer().catch(console.error);
          EOF
          
          echo "[OK] MCP startup script created"

      - name: Create Copilot context file
        run: |
          # Generate context for Copilot
          cat > .github/copilot-context.json << EOF
          {
            "project": {
              "name": "${{ github.event.repository.name }}",
              "type": "azure-infrastructure",
              "language": "bicep",
              "framework": "azd"
            },
            "infrastructure": {
              "provider": "azure",
              "iac_tool": "bicep",
              "deployment_tool": "azd",
              "ci_cd": "github_actions"
            },
            "mcp": {
              "enabled": true,
              "server": "@modelcontextprotocol/server-azure",
              "features": ["resource-discovery", "cost-analysis", "security-scanning"]
            },
            "conventions": {
              "naming": {
                "resourceGroup": "rg-{project}-{environment}",
                "keyVault": "kv-{project}-{env}-{unique}",
                "storageAccount": "st{project}{env}{unique}",
                "containerRegistry": "acr{project}{env}{unique}"
              },
              "environments": ["development", "staging", "production"]
            },
            "last_updated": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF
          
          echo "[OK] Copilot context file created"

      - name: Validate Azure YAML configuration
        run: |
          if [ ! -f "azure.yaml" ]; then
            echo "Missing azure.yaml file"
            exit 1
          fi
          
          # Basic YAML validation
          python -c "import yaml; yaml.safe_load(open('azure.yaml'))" || {
            echo "Invalid YAML in azure.yaml"
            exit 1
          }
          
          echo "[OK] Azure YAML configuration is valid"

      - name: Check for infrastructure documentation
        run: |
          # Ensure Bicep files have proper documentation
          for bicep_file in $(find ./infra -name "*.bicep" -type f); do
            echo "Checking: $bicep_file"
            
            # Check for parameter descriptions
            if ! grep -q "@description" "$bicep_file"; then
              echo "[WARN] $bicep_file lacks parameter descriptions"
            fi
            
            # Check for module documentation
            if ! grep -q "// =" "$bicep_file"; then
              echo "[WARN] $bicep_file lacks section headers"
            fi
          done

      - name: Test MCP Server connectivity
        if: github.event_name == 'pull_request'
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          # Start MCP server in background
          node .mcp/start-server.js &
          MCP_PID=$!
          
          # Wait for server to start
          sleep 5
          
          # Test server is running
          curl -f http://localhost:3333/health || {
            echo "MCP Server health check failed"
            kill $MCP_PID
            exit 1
          }
          
          # Stop server
          kill $MCP_PID
          
          echo "[OK] MCP Server connectivity test passed"

      - name: Create PR comment with Copilot setup status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const status = `
            ## GitHub Copilot & MCP Setup Status
            
            **Copilot Instructions**: Found and validated
            **MCP Server**: Configured and tested
            **Project Context**: Generated successfully
            
            ### Available MCP Commands:
            - \`@azure list resources\` - List all Azure resources
            - \`@azure find naming-patterns\` - Discover naming conventions
            - \`@azure costs current month\` - Get cost analysis
            - \`@azure suggest optimizations\` - Get optimization tips
            
            ### Next Steps:
            1. Create infrastructure issues using the templates
            2. Use MCP commands in issues for discovery
            3. Let Copilot implement based on discoveries
            
            The Azure MCP Server is configured and ready for use with Copilot Workspace!
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: status
            });
'@
        $copilotSetupWorkflow | Out-File -FilePath $copilotWorkflowPath -Encoding UTF8
        Write-Success "Added/Updated Copilot setup workflow with MCP configuration"
    }
}

# Update Issue Templates
if ($UpdateIssueTemplates) {
    Write-Host ""
    Write-Info "Updating Issue Templates..."
    
    $templateDir = ".github/ISSUE_TEMPLATE"
    if (-not (Test-Path $templateDir)) {
        New-Item -ItemType Directory -Path $templateDir -Force | Out-Null
    }
    
    # Infrastructure Request Template
    $requestTemplate = @'
name: Infrastructure Request
description: Request new Azure infrastructure components
title: "[INFRA] "
labels: ["infrastructure", "copilot-workspace"]
assignees: []
body:
  - type: markdown
    attributes:
      value: |
        ## Infrastructure Request
        Use this template to request new Azure infrastructure components.
        
  - type: input
    id: service
    attributes:
      label: Azure Service
      description: Which Azure service do you need?
      placeholder: e.g., Container Registry, PostgreSQL, Storage Account
    validations:
      required: true
      
  - type: dropdown
    id: environments
    attributes:
      label: Target Environments
      description: Which environments need this service?
      multiple: true
      options:
        - Development
        - Staging  
        - Production
        - All
    validations:
      required: true
      
  - type: textarea
    id: requirements
    attributes:
      label: Requirements
      description: Describe the specific configuration requirements
      placeholder: |
        - SKU/Tier needed
        - Network configuration  
        - Security requirements
        - Integration points
        - Special features needed
    validations:
      required: true
      
  - type: textarea
    id: mcp-discovery
    attributes:
      label: MCP Discovery Instructions
      description: Instructions for Copilot to discover existing infrastructure
      value: |
        Use Azure MCP to discover existing infrastructure:
        ```
        @azure list resources
        @azure find resources type:[relevant-type]
        @azure get naming-patterns
        ```
      
  - type: textarea
    id: dependencies
    attributes:
      label: Dependencies
      description: What other resources must exist first?
      placeholder: |
        - Virtual Network (for private endpoints)
        - Key Vault (for secrets)
        - Container Registry (for container deployments)
        
  - type: textarea
    id: acceptance
    attributes:
      label: Acceptance Criteria
      description: How will we know this is complete?
      placeholder: |
        - [ ] Service deployed with specified configuration
        - [ ] RBAC permissions configured
        - [ ] Private endpoints configured (if required)
        - [ ] Monitoring enabled
        - [ ] Secrets stored in Key Vault
        - [ ] Documentation updated
    validations:
      required: true
      
  - type: textarea
    id: copilot-instructions
    attributes:
      label: Implementation Notes for Copilot
      description: Any specific implementation guidance?
      placeholder: |
        - Use Azure Verified Module version X.Y.Z
        - Follow existing patterns discovered by MCP
        - Specific parameter values needed
'@
    $requestTemplate | Out-File -FilePath "$templateDir/infrastructure-request.yml" -Encoding UTF8
    Write-Success "Updated infrastructure request template"
    
    # Add MCP-aware template
    $mcpTemplate = @'
name: MCP-Aware Infrastructure Request
description: Request infrastructure with automatic discovery
title: "[INFRA-MCP] "
labels: ["infrastructure", "copilot-workspace", "mcp-enabled"]
assignees: []
body:
  - type: markdown
    attributes:
      value: |
        ## MCP-Aware Infrastructure Request
        This template uses Azure MCP for intelligent infrastructure creation.
        
  - type: textarea
    id: objective
    attributes:
      label: What do you want to build?
      description: Describe the infrastructure you need
      placeholder: |
        I need a PostgreSQL database for my application with high availability...
    validations:
      required: true
      
  - type: textarea
    id: mcp-instructions
    attributes:
      label: Copilot MCP Discovery Instructions
      description: Pre-filled MCP commands for Copilot
      value: |
        1. Discover existing infrastructure:
        ```
        @azure list resources
        @azure find naming-patterns
        @azure find resources type:Microsoft.Network/virtualNetworks
        @azure find resources type:Microsoft.KeyVault/vaults
        @azure find resources type:Microsoft.OperationalInsights/workspaces
        ```
        
        2. Based on discoveries:
        - Follow existing naming patterns
        - Use same location as other resources
        - Integrate with existing VNet if found
        - Store secrets in existing Key Vault
        - Use existing Log Analytics for monitoring
        
        3. Create Bicep template that fits discovered infrastructure
'@
    $mcpTemplate | Out-File -FilePath "$templateDir/mcp-infrastructure-request.yml" -Encoding UTF8
    Write-Success "Added MCP-aware infrastructure template"
}

# Update Copilot Instructions
if ($UpdateCopilotInstructions) {
    Write-Host ""
    Write-Info "Updating Copilot Instructions..."
    
    $copilotPath = ".github/copilot-instructions.md"
    
    if (Test-Path $copilotPath) {
        Backup-File $copilotPath
    }
    
    # Create updated instructions with MCP
    $copilotContent = @"
# GitHub Copilot Instructions - $projectName Infrastructure

## Project Overview
This repository contains Azure infrastructure as code for $projectName using Bicep and Azure Developer CLI (azd).

## Azure MCP Server Integration

When implementing infrastructure from issues, use the Azure MCP Server to discover existing resources:

### MCP Commands for Infrastructure Discovery

**Basic Discovery:**
- @azure list resources - List all resources in subscription
- @azure find resources type:Microsoft.Storage/storageAccounts - Find specific resource types
- @azure get resource /subscriptions/.../resourceGroups/.../providers/... - Get resource details

**Infrastructure Analysis:**
- @azure analyze infrastructure - Complete infrastructure analysis
- @azure find naming-patterns - Discover naming conventions from existing resources
- @azure get resource-dependencies {resourceId} - Find resource dependencies

**Cost Analysis:**
- @azure costs current month - Get current month costs
- @azure costs by resource-group - Breakdown by resource group
- @azure suggest cost-optimizations - Get optimization recommendations

**Integration Helpers:**
- @azure get connection-string {resourceName} - Get connection strings
- @azure list secrets {keyVaultName} - List Key Vault secrets
- @azure test connectivity {source} {target} - Test connectivity between resources

### Implementation Workflow with MCP

1. **Discover Existing Infrastructure**
   - Use MCP to list all resources
   - Identify naming patterns
   - Find existing resource groups, networks, monitoring

2. **Analyze Before Creating**
   - Check if similar resources exist
   - Understand current architecture
   - Identify integration points

3. **Create Consistent Infrastructure**
   - Follow discovered naming patterns
   - Use same locations and tags
   - Integrate with existing monitoring and networking

4. **Validate Integration**
   - Test connectivity to existing resources
   - Verify RBAC permissions
   - Check monitoring data flow

## Key Principles
1. **Always use Azure Verified Modules (AVM)** from https://aka.ms/avm
2. **Use MCP to discover existing patterns** before creating new resources
3. **Never hardcode secrets** - use Key Vault references
4. **Use managed identities** instead of connection strings where possible
5. **Enable private endpoints** for production environments
6. **Include diagnostic settings** for all resources

## Project Structure
- /infra/main.bicep - Main infrastructure entry point
- /infra/modules/ - Custom Bicep modules
- /environments/ - Environment-specific parameters
- /.github/workflows/ - CI/CD pipelines

## Naming Conventions
Discover from existing resources using: @azure find naming-patterns

Common patterns:
- Resource Groups: rg-{project}-{environment}
- Key Vaults: kv-{project}-{env}-{unique}
- Storage Accounts: st{project}{env}{unique}
- Container Apps: ca-{component}-{project}-{env}

## When Implementing Infrastructure

### Adding a New Service
1. First use MCP to discover: @azure list resources type:{service-type}
2. Check for existing AVM module at https://aka.ms/avm
3. Create module in /infra/modules/ if custom logic needed
4. Add to main.bicep with proper dependencies
5. Update parameter files
6. Configure RBAC assignments
7. Add diagnostic settings
8. Document outputs

## Common AVM Modules
- Resource Group: br/public:avm/res/resources/resource-group:0.4.0
- Storage Account: br/public:avm/res/storage/storage-account:0.15.0
- Key Vault: br/public:avm/res/key-vault/vault:0.11.0
- Container Registry: br/public:avm/res/container-registry/registry:0.6.0

## Security Requirements
- Enable diagnostic logs for all resources
- Use private endpoints for data services
- Implement least-privilege RBAC
- Enable soft delete for Key Vault
- Use customer-managed keys where applicable

## Cost Optimization
- Use @azure analyze cost-optimization to find savings
- Use appropriate SKUs per environment
- Implement auto-shutdown for non-production
- Enable lifecycle policies for storage
- Right-size compute resources
- Use reserved instances for production

---
Updated on $(Get-Date -Format "yyyy-MM-dd") by update-azure-project.ps1
"@
    $copilotContent | Out-File -FilePath $copilotPath -Encoding UTF8
    Write-Success "Updated Copilot instructions"
}

# Update Scripts
if ($UpdateScripts) {
    Write-Host ""
    Write-Info "Updating Scripts..."
    
    # Update validate.ps1
    $validateScript = @'
# validate.ps1
# Validates project configuration

Write-Host "Validating project..." -ForegroundColor Blue

# Check required files
$requiredFiles = @(
    "azure.yaml",
    "infra/main.bicep",
    "infra/main.parameters.json",
    ".github/workflows/azure-deploy.yml"
)

$allValid = $true
foreach ($file in $requiredFiles) {
    if (Test-Path $file) {
        Write-Host "[OK] Found: $file" -ForegroundColor Green
    } else {
        Write-Host "[MISSING] $file" -ForegroundColor Yellow
        $allValid = $false
    }
}

# Validate Bicep files
Write-Host ""
Write-Host "Validating Bicep templates..." -ForegroundColor Blue
Get-ChildItem -Path ./infra -Filter *.bicep -Recurse | ForEach-Object {
    Write-Host "Checking: $($_.FullName)"
    $result = az bicep build --file $_.FullName 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "[OK] Valid" -ForegroundColor Green
    } else {
        Write-Host "[ERROR] Invalid: $result" -ForegroundColor Red
        $allValid = $false
    }
}

# Check for AVM updates
Write-Host ""
Write-Host "Checking for AVM module updates..." -ForegroundColor Blue
$bicepFiles = Get-ChildItem -Path ./infra -Filter *.bicep -Recurse
foreach ($file in $bicepFiles) {
    $content = Get-Content $file.FullName -Raw
    if ($content -match "br/public:avm/res/([^:]+):([0-9.]+)") {
        $module = $Matches[1]
        $version = $Matches[2]
        Write-Host "[INFO] Found AVM module: $module version $version"
    }
}

if ($allValid) {
    Write-Host ""
    Write-Host "Validation complete!" -ForegroundColor Green
} else {
    Write-Host ""
    Write-Host "Validation failed!" -ForegroundColor Red
    exit 1
}
'@
    $validateScript | Out-File -FilePath "scripts/validate.ps1" -Encoding UTF8
    Write-Success "Updated validate.ps1"
}

# Summary
Write-Host ""
Write-Host "Update Summary:" -ForegroundColor Green
Write-Host "===============" -ForegroundColor Green

if ($UpdateWorkflows) {
    Write-Success "GitHub Workflows updated:"
    Write-Success "  - azure-deploy.yml (deployment workflow)"
    Write-Success "  - copilot-setup-steps.yml (MCP configuration)"
}
if ($UpdateIssueTemplates) {
    Write-Success "Issue Templates updated"
    Write-Info "  - Standard infrastructure request template"
    Write-Info "  - MCP-aware infrastructure template added"
}
if ($UpdateCopilotInstructions) {
    Write-Success "Copilot Instructions updated with MCP integration"
}
if ($UpdateScripts) {
    Write-Success "Scripts updated"
}

Write-Host ""
Write-Host "Next Steps:" -ForegroundColor Yellow
Write-Host "1. Review any backup files created" -ForegroundColor White
Write-Host "2. Test the updated workflows" -ForegroundColor White
Write-Host "3. Commit the changes to git" -ForegroundColor White
Write-Host "4. Create new issues using the MCP-aware templates" -ForegroundColor White
Write-Host "5. The copilot-setup-steps workflow will configure MCP automatically" -ForegroundColor White

Write-Host ""
Write-Success "Update complete!"